#!/usr/bin/python3
#
# This file allows for parsing a flattened Verilog module
# as it is generated by Yosys after synthesis
# and for evaluation of simple assertions
#

import re
from netlists import Netlist

#
# A list of submodules accepted as primitives
#
primitives = [
    "SB_LUT4",
    "SB_DFFES",
    "SB_DFFER",
    "SB_PLL40_CORE"
]


#
# A class to hold static assertion methods
#
class assertion:
    def netIsNotConstant(netlist, net):
        #
        # If it is constant, then there must be
        # a line in the form: assign netname = literal;
        #
        #assign \u_to_f0.counter0.reset  = 1'h0;
        for line in netlist.lines:
            if line.find("assign ") < 0:
                continue
            if line.find(net) < 0:
                continue
            print(line)
        return False


#
# A class to hold all relevant information about a flattened Verilog file
#
# class File(Netlist):
class File():
    def __init__(self, filename):
        f = open(filename, "r")
        self.lines = f.read().split("\n")
        f.close()


#
# A class to hold a list of assertions a Verilog netlist must fulfill
#
class Assertions():
    def __init__(self):
        self.assertions = []

    def append(self, assertion, arg0=""):
        self.assertions += [[assertion, arg0]]

    def apply(self, netlist):
        for assertion in self.assertions:
            self.applyAssertion(netlist, assertion)

    def applyAssertion(self, netlist, assertion):
        assertion[0](netlist, assertion[1])
